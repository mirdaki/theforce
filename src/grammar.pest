Program = _{ SOI ~ Functions ~ EOI }

Functions = { Function* }

Function = _{ VoidFunction | NonVoidFunction | Main }

VoidFunction = {
    DeclareFunction ~ FunctionName
    ~ Parameters
    ~ Statements
    ~ EndFunctionDeclaration
}

NonVoidFunction = {
    DeclareFunction ~ FunctionName
    ~ Parameters
    ~ NotVoidFunction
    ~ Statements
    ~ ReturnStatement
    ~ EndFunctionDeclaration
}

Parameters = { (FunctionParameters ~ VariableName)* }

Main = { 
    BeginMain 
    ~ Statements
    ~ EndMain }

Statements = _{ Statement* }

Statement = _{
    DeclareBooleanStatement
    | DeclareFloatStatement
    | DeclareStringStatement
    | AssignStatement
    | AssignFromFunctionStatement
    | PrintStatement
    | ReadFloatStatement
    | ReadStringStatement
    | ReadBooleanStatement
    | ForStatement
    | WhileStatement
    | IfStatement
    | CallFunctionStatement
    | Noop
}

DeclareBooleanStatement = {
    DeclareBool ~ VariableName
    ~ SetInitalValue ~ (Boolean | VariableName)
}

DeclareFloatStatement = {
    DeclareFloat ~ VariableName
    ~ SetInitalValue ~ (Float | VariableName)
}

DeclareStringStatement = {
    DeclareString ~ VariableName
    ~ SetInitalValue ~ (String | VariableName)
}

AssignStatement = {
    AssignVariable ~ VariableName
    ~ SetValue ~ Value
    ~ Operator*
    ~ EndAssignVariable
}

AssignFromFunctionStatement = {
    AssignVariableFromFunctionCall ~ VariableName
    ~ CallFunctionStatement
    ~ Operator*
    ~ EndAssignVariable
}

PrintStatement = { Print ~ Value }

ReadFloatStatement = { ReadFloat ~ VariableName }
ReadStringStatement = { ReadString ~ VariableName }
ReadBooleanStatement = { ReadBoolean ~ VariableName }

ForStatement = { 
    For ~ Value
    ~ ForStart ~ VariableName
    ~ Statements
    ~ EndFor
}

WhileStatement = { 
    While ~ Value
    ~ Statements
    ~ EndWhile
}

IfStatement = {
    If ~ Value
    ~ Statements
    ~ ElseClause?
    ~ EndIf
}

CallFunctionStatement = { 
    CallFunction ~ FunctionName
    ~ Arguments
}

Arguments = { (PassArgument ~ Value)* }

ElseClause = { Else ~ Statements }

ReturnStatement = { Return ~ Value }

Operator = _{ UnaryOperator | BinaryOperator }

UnaryOperator = _{ NotOperator }

NotOperator = { Not }

BinaryOperator = _{
    AddOperator
    | SubtractOperator
    | MultiplyOperator
    | DivideOperator
    | ExponentOperator
    | ModulusOperator
    | EqualOperator
    | GreaterThanOperator
    | LessThanOperator
    | OrOperator
    | AndOperator
}

AddOperator = { Add ~ Value }
SubtractOperator = { Subtract ~ Value }
MultiplyOperator = { Multiply ~ Value }
DivideOperator = { Divide ~ Value }
ExponentOperator = { Exponent ~ Value }
ModulusOperator = { Modulus ~ Value }
EqualOperator = { Equal ~ Value }
GreaterThanOperator = { GreaterThan ~ Value }
LessThanOperator = { LessThan ~ Value }
OrOperator = { Or ~ Value }
AndOperator = { And ~ Value }

Value = _{ Boolean | Float | String | VariableName  }

VariableName = { Identifier }

FunctionName = { Identifier }

Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

Float = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

Boolean = { True | False }

True = { "From a certain point of view." }
False = { "No, that's not true. That's impossible!" }

String = ${ "\"" ~ Inner ~ "\"" }
Inner = { Characters ~ (Escape ~ Inner)? }

Characters = @{ Character* }
Character = @{ !("\"" | "\\") ~ ANY }
Escape = @{ "\\" ~ ("\"" | "\\" | "/" | "n" | "r" | "t") }

WHITESPACE = _{ " " | "\t" | NEWLINE }

BeginMain = _{ "Do it!" }
EndMain = _{ "May The Force be with you." }
Print = _{ "The Sacred Texts!" }
DeclareFunction = _{ "This is where the fun begins." }
FunctionParameters = _{ "Now that’s a name I have not heard in a long time, a long time." }
NotVoidFunction = _{ "It's a trap!" }
Return = _{ "You’re all clear kid, let's blow this thing and go home." }
EndFunctionDeclaration = _{ "It is clear to me the Republic no longer functions." }
AssignVariable = _{ "What a piece of junk!" }
AssignVariableFromFunctionCall = _{ "Many Bothans died to bring us this information." }
EndAssignVariable = _{ "The garbage will do." }
SetValue = _{ "I am your father." }
CallFunction = _{ "I have a bad feeling about this." }
Not = { "Always with you what cannot be done." }
Add = _{ "This will make a fine addition to my collection." }
Subtract = _{ "Proceed with the countdown." }
Multiply = _{ "There's too many of them!" }
Divide = _{ "Not to worry, at least we are flying half a ship." }
Exponent = _{ "Unlimited power!" }
Modulus = _{ "Never tell me the odds!" }
Equal = _{ "You're a Jedi too, nice to meet you." }
GreaterThan = _{ "There is always a bigger fish." }
LessThan = _{ "Impressive. Most impressive." }
Or = _{ "As you wish." }
And = _{ "There is another." }
DeclareFloat = _{ "Yoda, you seek Yoda." }
DeclareString = _{ "Size matters not." }
DeclareBool = _{ "I am the senate!" }
SetInitalValue = _{ "Whoosa are youssa?" }
Noop = _{ "Move along. Move along." }
While = _{ "Here we go again." }
EndWhile = _{ "Let the past die." }
If = _{ "Do or do not." }
Else = _{ "These aren’t the droids you’re looking for." }
EndIf = _{ "You have failed me for the last time." }
PassArgument = _{ "I’ll try spinning, thats a good trick." }
For = _{ "For a thousand generations the Jedi were guardians of the republic." }
ForStart = _{ "Let the Wookiee win." }
EndFor = _{ "You cannot escape your destiny." }
ReadFloat = _{ "Looking, found someone I would say you have." }
ReadString = _{ "Now this is pod racing." }
ReadBoolean = _{ "I hope you know what you’re doing." }
